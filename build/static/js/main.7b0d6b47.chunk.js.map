{"version":3,"sources":["http-common.js","services/tutorial.service.js","components/add-tutorial.component.js","components/tutorial.component.js","components/tutorials-list.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddTutorial","props","onChangeTitle","bind","onChangeDescription","saveTutorial","newTutorial","state","description","published","submitted","e","this","setState","target","value","TutorialDataService","then","response","console","log","catch","className","onClick","htmlFor","type","required","onChange","name","Component","Tutorial","getTutorial","updatePublished","updateTutorial","deleteTutorial","currentTutorial","message","match","params","prevState","status","update","history","push","TutorialsList","onChangeSearchTitle","retrieveTutorials","refreshList","setActiveTutorial","removeAllTutorials","searchTitle","tutorials","currentIndex","patientFamilyHistory","getAll","tutorial","index","getpatiesntFamilyhistory","deleteAll","patintid","entry","findByTitle","trim","placeholder","onSearch","onInvalidSearch","map","resource","key","text","active","undefined","address","city","country","district","postalCode","use","his","resourceType","relationship","App","to","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","locale","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.7b0d6b47.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: \"https://fhir-open.cerner.com/r4\",\n  headers: {\n      \"Content-type\": \"application/json+fhir\"\n  }\n});","import http from \"../http-common\";\n\nclass TutorialDataService {\n  getAll() {\n      return http.get(\"saec2458f2-1e24-41c8-b71b-0e701af7583d/Patient/12742633\");\n  }\n\n  get(id) {\n      return http.get(`/ec2458f2-1e24-41c8-b71b-0e701af7583d/FamilyMemberHistory?patient=${id}`);\n  }\n\n  create(data) {\n    return http.post(\"/tutorials\", data);\n  }\n\n  update(id, data) {\n    return http.put(`/tutorials/${id}`, data);\n  }\n\n  delete(id) {\n    return http.delete(`/tutorials/${id}`);\n  }\n\n  deleteAll() {\n    return http.delete(`/tutorials`);\n  }\n\n  findByTitle(title) {\n      return http.get(`/ec2458f2-1e24-41c8-b71b-0e701af7583d/Patient?name=${title}`);\n  }\n}\n\nexport default new TutorialDataService();","import React, { Component } from \"react\";\nimport TutorialDataService from \"../services/tutorial.service\";\n\nexport default class AddTutorial extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.saveTutorial = this.saveTutorial.bind(this);\n    this.newTutorial = this.newTutorial.bind(this);\n\n    this.state = {\n      id: null,\n      title: \"\",\n      description: \"\", \n      published: false,\n\n      submitted: false\n    };\n  }\n\n  onChangeTitle(e) {\n    this.setState({\n      title: e.target.value\n    });\n  }\n\n  onChangeDescription(e) {\n    this.setState({\n      description: e.target.value\n    });\n  }\n\n  saveTutorial() {\n    var data = {\n      title: this.state.title,\n      description: this.state.description\n    };\n\n    TutorialDataService.create(data)\n      .then(response => {\n        this.setState({\n          id: response.data.id,\n          title: response.data.title,\n          description: response.data.description,\n          published: response.data.published,\n\n          submitted: true\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  newTutorial() {\n    this.setState({\n      id: null,\n      title: \"\",\n      description: \"\",\n      published: false,\n\n      submitted: false\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"submit-form\">\n        {this.state.submitted ? (\n          <div>\n            <h4>You submitted successfully!</h4>\n            <button className=\"btn btn-success\" onClick={this.newTutorial}>\n              Add\n            </button>\n          </div>\n        ) : (\n          <div>\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">Title</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"title\"\n                required\n                value={this.state.title}\n                onChange={this.onChangeTitle}\n                name=\"title\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"description\">Description</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"description\"\n                required\n                value={this.state.description}\n                onChange={this.onChangeDescription}\n                name=\"description\"\n              />\n            </div>\n\n            <button onClick={this.saveTutorial} className=\"btn btn-success\">\n              Submit\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport TutorialDataService from \"../services/tutorial.service\";\n\nexport default class Tutorial extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.getTutorial = this.getTutorial.bind(this);\n    this.updatePublished = this.updatePublished.bind(this);\n    this.updateTutorial = this.updateTutorial.bind(this);\n    this.deleteTutorial = this.deleteTutorial.bind(this);\n\n    this.state = {\n      currentTutorial: {\n        id: null,\n        title: \"\",\n        description: \"\",\n        published: false\n      },\n      message: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.getTutorial(this.props.match.params.id);\n  }\n\n  onChangeTitle(e) {\n    const title = e.target.value;\n\n    this.setState(function(prevState) {\n      return {\n        currentTutorial: {\n          ...prevState.currentTutorial,\n          title: title\n        }\n      };\n    });\n  }\n\n  onChangeDescription(e) {\n    const description = e.target.value;\n    \n    this.setState(prevState => ({\n      currentTutorial: {\n        ...prevState.currentTutorial,\n        description: description\n      }\n    }));\n  }\n\n  getTutorial(id) {\n    TutorialDataService.get(id)\n      .then(response => {\n        this.setState({\n          currentTutorial: response.data\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  updatePublished(status) {\n    var data = {\n      id: this.state.currentTutorial.id,\n      title: this.state.currentTutorial.title,\n      description: this.state.currentTutorial.description,\n      published: status\n    };\n\n    TutorialDataService.update(this.state.currentTutorial.id, data)\n      .then(response => {\n        this.setState(prevState => ({\n          currentTutorial: {\n            ...prevState.currentTutorial,\n            published: status\n          }\n        }));\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  updateTutorial() {\n    TutorialDataService.update(\n      this.state.currentTutorial.id,\n      this.state.currentTutorial\n    )\n      .then(response => {\n        console.log(response.data);\n        this.setState({\n          message: \"The tutorial was updated successfully!\"\n        });\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  deleteTutorial() {    \n    TutorialDataService.delete(this.state.currentTutorial.id)\n      .then(response => {\n        console.log(response.data);\n        this.props.history.push('/tutorials')\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  render() {\n    const { currentTutorial } = this.state;\n\n    return (\n      <div>\n        {currentTutorial ? (\n          <div className=\"edit-form\">\n            <h4>Tutorial</h4>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"title\">Title</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"title\"\n                  value={currentTutorial.title}\n                  onChange={this.onChangeTitle}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"description\">Description</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"description\"\n                  value={currentTutorial.description}\n                  onChange={this.onChangeDescription}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label>\n                  <strong>Status:</strong>\n                </label>\n                {currentTutorial.published ? \"Published\" : \"Pending\"}\n              </div>\n            </form>\n\n            {currentTutorial.published ? (\n              <button\n                className=\"badge badge-primary mr-2\"\n                onClick={() => this.updatePublished(false)}\n              >\n                UnPublish\n              </button>\n            ) : (\n              <button\n                className=\"badge badge-primary mr-2\"\n                onClick={() => this.updatePublished(true)}\n              >\n                Publish\n              </button>\n            )}\n\n            <button\n              className=\"badge badge-danger mr-2\"\n              onClick={this.deleteTutorial}\n            >\n              Delete\n            </button>\n\n            <button\n              type=\"submit\"\n              className=\"badge badge-success\"\n              onClick={this.updateTutorial}\n            >\n              Update\n            </button>\n            <p>{this.state.message}</p>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Please click on a Tutorial...</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport TutorialDataService from \"../services/tutorial.service\";\nimport { Link } from \"react-router-dom\";\nimport SearchField from 'terra-search-field';\n\nexport default class TutorialsList extends Component {\n    constructor(props) {\n        super(props);\n        this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\n        this.retrieveTutorials = this.retrieveTutorials.bind(this);\n        this.refreshList = this.refreshList.bind(this);\n        this.setActiveTutorial = this.setActiveTutorial.bind(this);\n        this.removeAllTutorials = this.removeAllTutorials.bind(this);\n        this.searchTitle = this.searchTitle.bind(this);\n\n        this.state = {\n            tutorials: [],\n            currentTutorial: null,\n            currentIndex: -1,\n            searchTitle: \"\",\n            patientFamilyHistory: []\n        };\n    }\n\n    componentDidMount() {\n        this.retrieveTutorials();\n    }\n\n    onChangeSearchTitle(e) {\n        const searchTitle = e.target.value;\n\n        this.setState({\n            searchTitle: searchTitle\n        });\n    }\n\n    retrieveTutorials() {\n        TutorialDataService.getAll()\n            .then(response => {\n                this.setState({\n                    tutorials: response.data\n                });\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    refreshList() {\n        this.retrieveTutorials();\n        this.setState({\n            currentTutorial: null,\n            currentIndex: -1\n        });\n    }\n\n    setActiveTutorial(tutorial, index) {\n        this.getpatiesntFamilyhistory(tutorial.id);\n        this.setState({\n            currentTutorial: tutorial,\n            currentIndex: index\n        });\n    }\n\n    removeAllTutorials() {\n        TutorialDataService.deleteAll()\n            .then(response => {\n                console.log(response.data);\n                this.refreshList();\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n\n    getpatiesntFamilyhistory(patintid) {\n        TutorialDataService.get(patintid)\n            .then(response => {\n                this.setState({\n                    patientFamilyHistory: response.data.entry\n                })\n\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n\n\n    searchTitle(e) {\n        this.setState({\n            currentTutorial: null,\n            currentIndex: -1\n        });\n\n        TutorialDataService.findByTitle(this.state.searchTitle.trim() == '' ? e : this.state.searchTitle)\n            .then(response => {\n                this.setState({\n                    tutorials: response.data.entry\n                });\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    render() {\n        const { searchTitle, tutorials, currentTutorial, currentIndex, patientFamilyHistory } = this.state;\n\n        return (\n            <div className=\"list row\">\n                <div className=\"col-md-8\">\n                    <div className=\"input-group mb-3\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"Search by title\"\n                            value={searchTitle}\n                            onChange={this.onChangeSearchTitle}\n                        />\n                        <div className=\"input-group-append\">\n                            <button\n                                className=\"btn btn-outline-secondary\"\n                                type=\"button\"\n                                onClick={this.searchTitle}\n                            >\n                                Search\n                            </button>\n                        </div>\n                    </div>\n                    <div>\n                        <SearchField onSearch={this.searchTitle} onInvalidSearch={searchTitle} />\n                    </div>\n                </div>\n                <div className=\"col-md-6\">\n                    <h4>Tutorials List hello</h4>\n\n                    <ul className=\"list-group\">\n                        {tutorials &&\n                            tutorials.map((tutorial, index) => (\n                                <li\n                                    className={\n                                        \"list-group-item \" +\n                                        (index === currentIndex ? \"active\" : \"\")\n                                    }\n                                    onClick={() => this.setActiveTutorial(tutorial.resource, index)}\n                                    key={index}\n                                >\n                                    {tutorial.resource.name[0].text}\n                                </li>\n                            ))}\n                    </ul>\n\n                    <button\n                        className=\"m-3 btn btn-sm btn-danger\"\n                        onClick={this.removeAllTutorials}\n                    >\n                        Remove All\n                    </button>\n                </div>\n                <div className=\"col-md-6\">\n                    {currentTutorial ? (\n                        <>\n                            <div>\n                                <h4>Patient Details </h4>\n                                <div>\n                                    <label>\n                                        <strong>Name:</strong>\n                                    </label>{\" \"}\n                                    {currentTutorial.name[0].text}\n                                </div>\n                                <div>\n                                    <label>\n                                        <strong>patientId:</strong>\n                                    </label>{\" \"}\n                                    {currentTutorial.id}\n                                </div>\n                                <div>\n                                    <label>\n                                        <strong>Status:</strong>\n                                    </label>{\" \"}\n                                    {currentTutorial.active == true ? \"true\" : \"false\"}\n                                </div>\n\n\n                            </div>\n                            {currentTutorial.address !== undefined ?\n                                <div>\n                                    <h4>Patient Address </h4>\n                                    <div>\n                                        <label>\n                                            <strong>city:</strong>\n                                        </label>{\" \"}\n                                        {currentTutorial.address[0].city}\n                                    </div>\n                                    <div>\n                                        <label>\n                                            <strong>country:</strong>\n                                        </label>{\" \"}\n                                        {currentTutorial.address[0].country}\n                                    </div>\n                                    <div>\n                                        <label>\n                                            <strong>district:</strong>\n                                        </label>{\" \"}\n                                        {currentTutorial.address[0].district}\n                                    </div>\n                                    <div>\n                                        <label>\n                                            <strong>postalCode:</strong>\n                                        </label>{\" \"}\n                                        {currentTutorial.address[0].postalCode}\n                                    </div>\n                                    <div>\n                                        <label>\n                                            <strong>state:</strong>\n                                        </label>{\" \"}\n                                        {currentTutorial.address[0].state}\n                                    </div>\n                                    <div>\n                                        <label>\n                                            <strong>text:</strong>\n                                        </label>{\" \"}\n                                        {currentTutorial.address[0].text}\n                                    </div>\n                                    <div>\n                                        <label>\n                                            <strong>use:</strong>\n                                        </label>{\" \"}\n                                        {currentTutorial.address[0].use}\n                                    </div>\n\n\n                                </div>\n                                :\n                                <></>\n                            }\n\n\n\n                        </>\n                    ) : (\n                        <div>\n                            <br />\n                            <p>Please click on a Tutorial...</p>\n                        </div>\n                    )}\n\n                    {patientFamilyHistory &&\n                        patientFamilyHistory.map((his, index) => (\n                            <>\n                                <div>\n                                    <h4>Patient Family Details </h4>\n                                    <div>\n                                        <label>\n                                            <strong>resourceType:</strong>\n                                        </label>{\" \"}\n                                        {his.resource.resourceType}\n                                    </div>\n                                    <div>\n                                        <label>\n                                            <strong>status:</strong>\n                                        </label>{\" \"}\n                                        {his.resource.status}\n                                    </div>\n                                    <div>\n                                        <label>\n                                            <strong>relationship:</strong>\n                                        </label>{\" \"}\n                                        {his.resource?.relationship ? his.resource.relationship.text : \"\"}\n                                    </div>\n                                    {/*<div>*/}\n                                    {/*    <label>*/}\n                                    {/*        <strong>postalCode:</strong>*/}\n                                    {/*    </label>{\" \"}*/}\n                                    {/*    {currentTutorial.address[0].postalCode}*/}\n                                    {/*</div>*/}\n                                    {/*<div>*/}\n                                    {/*    <label>*/}\n                                    {/*        <strong>state:</strong>*/}\n                                    {/*    </label>{\" \"}*/}\n                                    {/*    {currentTutorial.address[0].state}*/}\n                                    {/*</div>*/}\n                                    {/*<div>*/}\n                                    {/*    <label>*/}\n                                    {/*        <strong>text:</strong>*/}\n                                    {/*    </label>{\" \"}*/}\n                                    {/*    {currentTutorial.address[0].text}*/}\n                                    {/*</div>*/}\n                                    {/*<div>*/}\n                                    {/*    <label>*/}\n                                    {/*        <strong>use:</strong>*/}\n                                    {/*    </label>{\" \"}*/}\n                                    {/*    {currentTutorial.address[0].use}*/}\n                                    {/*</div>*/}\n\n\n                                </div>\n                            </>\n                        ))\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddTutorial from \"./components/add-tutorial.component\";\nimport Tutorial from \"./components/tutorial.component\";\nimport TutorialsList from \"./components/tutorials-list.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <Link to={\"/tutorials\"} className=\"navbar-brand\">\n            bezKoder\n          </Link>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/tutorials\"} className=\"nav-link\">\n                Tutorials\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/tutorials\"]} component={TutorialsList} />\n            <Route exact path=\"/add\" component={AddTutorial} />\n            <Route path=\"/tutorials/:id\" component={Tutorial} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport SearchField from 'terra-search-field';\nimport { IntlProvider } from 'react-intl'\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <IntlProvider locale=\"en\">\n            <App />\n        </IntlProvider>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}